package banco;

import java.util.Scanner;

public class SistemaInterno {
	private static Banco banco;
    private static Cliente clienteLogado;
    private static Funcionario funcionarioLogado;
    private static Scanner scanner;

	public static void main(String[] args) {
		 // Aqui você pode testar o sistema

        // Exemplo de criação de um banco
		 banco = new Banco();
	     setScanner(new Scanner(System.in));

        // Exemplo de criação de clientes
        Cliente cliente1 = new Cliente("12345678901", "senha123");
        Cliente cliente2 = new Cliente("98765432109", "senha456");

        // Exemplo de criação de contas
        Conta conta1 = new ContaCorrente(cliente1.getCpf(), "001");
        Conta conta2 = new ContaPoupanca(cliente2.getCpf(), "002");

        // Exemplo de adição de clientes e contas ao banco
        banco.adicionarCliente(cliente1);
        banco.adicionarCliente(cliente2);
        banco.adicionarConta(conta1);
        banco.adicionarConta(conta2);

        // Menu principal
        int opcao;
        do {
            exibirMenuPrincipal();
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    loginCliente();
                    break;
                case 2:
                    loginFuncionario();
                    break;
                case 3:
                    // Encerrar o programa
                    System.out.println("Encerrando o sistema bancário...");
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 3);

        scanner.close();
    }

    private static void exibirMenuPrincipal() {
        System.out.println("### Sistema Bancário ###");
        System.out.println("1. Login Cliente");
        System.out.println("2. Login Funcionário");
        System.out.println("3. Sair");
        System.out.print("Escolha uma opção: ");
    }

    private static void loginCliente() {
        System.out.print("CPF: ");
        String cpf = scanner.nextLine();
        System.out.print("Senha: ");
        String senha = scanner.nextLine();

        clienteLogado = banco.realizarLoginCliente(cpf, senha);
        if (clienteLogado != null) {
            System.out.println("Login do cliente realizado com sucesso.");
            exibirMenuCliente();
        } else {
            System.out.println("CPF ou senha incorretos para o cliente.");
        }
    }

    private static void loginFuncionario() {
        System.out.print("CPF: ");
        String cpf = scanner.nextLine();
        System.out.print("Senha: ");
        String senha = scanner.nextLine();

        funcionarioLogado = banco.realizarLoginFuncionario(cpf, senha);
        if (funcionarioLogado != null) {
            System.out.println("Login do funcionário realizado com sucesso.");
            switch (funcionarioLogado.getCargo()) {
                case GERENTE:
                    exibirMenuGerente();
                    break;
                case DIRETOR:
                    exibirMenuDiretor();
                    break;
                case PRESIDENTE:
                    exibirMenuPresidente();
                    break;
            }
        } else {
            System.out.println("CPF ou senha incorretos para o funcionário.");
        }
    }

    private static void exibirMenuCliente() {
        int opcao;
        do {
            System.out.println("### Menu Cliente ###");
            System.out.println("1. Movimentações na Conta");
            System.out.println("2. Relatórios");
            System.out.println("3. Logout");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    exibirMenuMovimentacoesConta();
                    break;
                case 2:
                    exibirMenuRelatorios();
                    break;
                case 3:
                    clienteLogado = null;
                    System.out.println("Logout realizado com sucesso.");
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 3);
    }

    private static void exibirMenuMovimentacoesConta() {
        int opcao;
        do {
            System.out.println("### Movimentações na Conta ###");
            System.out.println("1. Saque");
            System.out.println("2. Depósito");
            System.out.println("3. Transferência para outra conta");
            System.out.println("4. Voltar");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    realizarSaque();
                    break;
                case 2:
                    realizarDeposito();
                    break;
                case 3:
                    realizarTransferencia();
                    break;
                case 4:
                    return; // Voltar ao menu anterior
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 4);
    }

    
    
    private static void realizarSaque() {
        if (clienteLogado == null) {
            System.out.println("É necessário fazer login como cliente para realizar esta operação.");
            return;
        }

        // Verificar se clienteLogado possui uma conta corrente
        Conta contaCliente = buscarContaCliente(clienteLogado.getCpf());
        if (contaCliente instanceof ContaCorrente) {
            System.out.print("Digite o valor do saque: ");
            double valor = scanner.nextDouble();
            scanner.nextLine(); // Limpar o buffer do scanner
            ((ContaCorrente) contaCliente).sacar(valor);
        } else {
            System.out.println("Você não possui uma conta corrente para realizar saques.");
        }
    }

    private static void realizarDeposito() {
        if (clienteLogado == null) {
            System.out.println("É necessário fazer login como cliente para realizar esta operação.");
            return;
        }

        // Verificar se clienteLogado possui uma conta corrente
        Conta contaCliente = buscarContaCliente(clienteLogado.getCpf());
        if (contaCliente instanceof ContaCorrente) {
            System.out.print("Digite o valor do depósito: ");
            double valor = scanner.nextDouble();
            scanner.nextLine(); // Limpar o buffer do scanner
            ((ContaCorrente) contaCliente).depositar(valor);
        } else {
            System.out.println("Você não possui uma conta corrente para realizar depósitos.");
        }
    }
    private static Conta buscarContaCliente(String cpf) {
        // Implementar a busca da conta do cliente no banco
        return null;
    }
    
    private static void realizarTransferencia() {
        if (clienteLogado == null) {
            System.out.println("É necessário fazer login como cliente para realizar esta operação.");
            return;
        }

        // Verificar se clienteLogado possui uma conta corrente
        Conta contaOrigem = buscarContaCliente(clienteLogado.getCpf());
        if (contaOrigem instanceof ContaCorrente) {
            System.out.print("Digite o número da conta de destino: ");
            String numeroContaDestino = scanner.nextLine();
            // Verificar se a conta de destino existe no banco
            Conta contaDestino = banco.buscarConta(numeroContaDestino);
            if (contaDestino != null) {
                System.out.print("Digite o valor da transferência: ");
                double valor = scanner.nextDouble();
                scanner.nextLine(); // Limpar o buffer do scanner
                if (((ContaCorrente) contaOrigem).transferir(contaDestino, valor)) {
                    System.out.println("Transferência realizada com sucesso.");
                } else {
                    System.out.println("Saldo insuficiente para realizar a transferência.");
                }
            } else {
                System.out.println("Conta de destino não encontrada.");
            }
        } else {
            System.out.println("Você não possui uma conta corrente para realizar transferências.");
        }
    }

    private static void exibirMenuRelatorios() {
        int opcao;
        do {
            System.out.println("### Relatórios ###");
            System.out.println("1. Saldo");
            System.out.println("2. Relatório de Tributação da Conta Corrente");
            System.out.println("3. Relatório de Rendimento da Poupança");
            System.out.println("4. Voltar");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    exibirSaldo();
                    break;
                case 2:
                    exibirRelatorioTributacao();
                    break;
                case 3:
                    exibirRelatorioRendimentoPoupanca();
                    break;
                case 4:
                    return; // Voltar ao menu anterior
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 4);
    }
    
    private static void exibirSaldo() {
        if (clienteLogado == null) {
            System.out.println("É necessário fazer login como cliente para acessar esta opção.");
            return;
        }

        // Verificar se clienteLogado possui uma conta
        Conta contaCliente = buscarContaCliente(clienteLogado.getCpf());
        if (contaCliente != null) {
            System.out.println("Saldo atual: R$ " + contaCliente.getSaldo());
        } else {
            System.out.println("Você não possui uma conta para verificar o saldo.");
        }
    }
    
    private static void exibirRelatorioTributacao() {
        if (clienteLogado == null) {
            System.out.println("É necessário fazer login como cliente para acessar esta opção.");
            return;
        }

        // Verificar se clienteLogado possui uma conta corrente
        Conta contaCliente = buscarContaCliente(clienteLogado.getCpf());
        if (contaCliente instanceof ContaCorrente) {
            ContaCorrente contaCorrente = (ContaCorrente) contaCliente;
            double totalGasto = contaCorrente.getTotalGasto();
            double taxaSaque = contaCorrente.getTaxaSaque();
            double taxaDeposito = contaCorrente.getTaxaDeposito();
            double taxaTransferencia = contaCorrente.getTaxaTransferencia();

            System.out.println("### Relatório de Tributação da Conta Corrente ###");
            System.out.println("Total gasto nas operações: R$ " + totalGasto);
            System.out.println("Taxa por saque: R$ " + taxaSaque);
            System.out.println("Taxa por depósito: R$ " + taxaDeposito);
            System.out.println("Taxa por transferência: R$ " + taxaTransferencia);
        } else {
            System.out.println("Você não possui uma conta corrente para gerar este relatório.");
        }
    }

    private static void exibirRelatorioRendimentoPoupanca() {
        if (clienteLogado == null) {
            System.out.println("É necessário fazer login como cliente para acessar esta opção.");
            return;
        }

        // Verificar se clienteLogado possui uma conta poupança
        Conta contaCliente = buscarContaCliente(clienteLogado.getCpf());
        if (contaCliente instanceof ContaPoupanca) {
            ContaPoupanca contaPoupanca = (ContaPoupanca) contaCliente;
            // Implementar o cálculo do rendimento da poupança
            double rendimento = contaPoupanca.calcularRendimento();
            System.out.println("### Relatório de Rendimento da Poupança ###");
            System.out.println("Rendimento atual da poupança: R$ " + rendimento);
        } else {
            System.out.println("Você não possui uma conta poupança para gerar este relatório.");
        }
    }
    private static void exibirMenuGerente() {
        int opcao;
        do {
            System.out.println("### Menu Gerente ###");
            System.out.println("1. Movimentações e Informações da Conta");
            System.out.println("2. Relatórios");
            System.out.println("3. Logout");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    exibirMenuMovimentacoesConta();
                    break;
                case 2:
                    exibirMenuRelatoriosGerente();
                    break;
                case 3:
                    funcionarioLogado = null;
                    System.out.println("Logout realizado com sucesso.");
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 3);
    }

    private static void exibirMenuRelatoriosGerente() {
        int opcao;
        do {
            System.out.println("### Relatórios ###");
            System.out.println("1. Saldo");
            System.out.println("2. Relatório de Tributação da Conta Corrente");
            System.out.println("3. Relatório de Rendimento da Poupança");
            System.out.println("4. Relatório do número de contas na agência");
            System.out.println("5. Voltar");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    exibirSaldo();
                    break;
                case 2:
                    exibirRelatorioTributacao();
                    break;
                case 3:
                    exibirRelatorioRendimentoPoupanca();
                    break;
                case 4:
                    exibirRelatorioNumContasAgencia();
                    break;
                case 5:
                    return; // Voltar ao menu anterior
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 5);
    }

    private static void exibirRelatorioNumContasAgencia() {
        if (funcionarioLogado == null || !(funcionarioLogado instanceof Gerente)) {
            System.out.println("É necessário fazer login como gerente para acessar esta opção.");
            return;
        }

        Gerente gerente = (Gerente) funcionarioLogado;
        int numContas = banco.contarContasNaAgencia(gerente.getIdentificadorAgencia());
        System.out.println("### Relatório de Número de Contas na Agência ###");
        System.out.println("Número de contas na agência: " + numContas);
    }

    private static void exibirMenuDiretor() {
        // Implementar o menu do diretor
    }

    private static void exibirMenuPresidente() {
        // Implementar o menu do presidente
    }
}
        // Exemplo de login de cliente
        Cliente clienteLogado = banco.realizarLoginCliente("12345678901", "senha123");
        if (clienteLogado != null) {
            System.out.println("Login do cliente realizado com sucesso.");
        } else {
            System.out.println("CPF ou senha incorretos para o cliente.");
        }

        // Exemplo de login de funcionário
        Funcionario funcionarioLogado = banco.realizarLoginFuncionario("123456789", "senha456");
        if (funcionarioLogado != null) {
            System.out.println("Login do funcionário realizado com sucesso.");
        } else {
            System.out.println("CPF ou senha incorretos para o funcionário.");
        }
    }

	public static Funcionario getFuncionarioLogado() {
		return funcionarioLogado;
	}

	public static void setFuncionarioLogado(Funcionario funcionarioLogado) {
		SistemaInterno.funcionarioLogado = funcionarioLogado;
	}

	public static Scanner getScanner() {
		return scanner;
	}

	public static void setScanner(Scanner scanner) {
		SistemaInterno.scanner = scanner;
	}

	public static Cliente getClienteLogado() {
		return clienteLogado;
	}

	public static void setClienteLogado(Cliente clienteLogado) {
		SistemaInterno.clienteLogado = clienteLogado;
	}

}
