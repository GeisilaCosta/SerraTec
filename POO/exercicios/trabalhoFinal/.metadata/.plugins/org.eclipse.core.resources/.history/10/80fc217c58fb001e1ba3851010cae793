package projetoBanco;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class SistemaInterno {
    private Map<String, Cliente> clientes;
    private Map<String, Funcionario> funcionarios;
    private static Scanner scanner;

    public SistemaInterno() {
        this.clientes = new HashMap<>();
        this.funcionarios = new HashMap<>();
        SistemaInterno.scanner = new Scanner(System.in);
        private Conta conta = new Conta();
    }

    public static void main(String[] args) {
        SistemaInterno sistema = new SistemaInterno();
        sistema.executar();
    }

    public void executar() {
        carregarClientes(); // Carregar clientes do arquivo de texto
        carregarFuncionarios(); // Carregar funcionários do arquivo de texto

        System.out.println("Bem-vindo ao Sistema Bancário!");

        // Menu de login
        System.out.print("CPF: ");
        String cpf = scanner.nextLine();

        System.out.print("Senha: ");
        String senha = scanner.nextLine();

        // Verificar se é Cliente ou Funcionário
        if (clientes.containsKey(cpf)) {
            Cliente cliente = clientes.get(cpf);
            if (cliente.getSenha().equals(senha)) {
                menuCliente(cliente);
            } else {
                System.out.println("Senha incorreta.");
            }
        } else if (funcionarios.containsKey(cpf)) {
            Funcionario funcionario = funcionarios.get(cpf);
            if (funcionario.getSenha().equals(senha)) {
                menuFuncionario(funcionario);
            } else {
                System.out.println("Senha incorreta.");
            }
        } else {
            System.out.println("CPF não cadastrado.");
        }
    }

    private void menuCliente(Cliente cliente) {
        System.out.println("Bem-vindo, " + cliente.getNome() + "!");

        boolean sair = false;
        while (!sair) {
            System.out.println("\nMenu:");
            System.out.println("1. Movimentações na Conta");
            System.out.println("2. Relatórios");
            System.out.println("3. Sair");
            System.out.print("Escolha uma opção: ");
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    movimentacoesConta(cliente);
                    break;
                case 2:
                    relatorios(cliente);
                    break;
                case 3:
                    sair = true;
                    break;
                default:
                    System.out.println("Opção inválida.");
            }
        }
    }

    private void movimentacoesConta(Cliente cliente) {
        System.out.println("\nMovimentações na Conta:");
        System.out.println("1. Saque");
        System.out.println("2. Depósito");
        System.out.println("3. Transferência para outra conta");
        System.out.println("4. Voltar");

        System.out.print("Escolha uma opção: ");
        int opcao = scanner.nextInt();
        scanner.nextLine(); // Limpar o buffer do scanner

        switch (opcao) {
            case 1:
                System.out.print("Informe o valor do saque: ");
                double valorSaque = scanner.nextDouble();
                cliente.sacar(valorSaque);
                break;
            case 2:
                System.out.print("Informe o valor do depósito: ");
                double valorDeposito = scanner.nextDouble();
                cliente.depositar(valorDeposito);
                break;
            case 3:
                System.out.print("Informe o CPF do destinatário: ");
                String cpfDestinatario = scanner.nextLine();
                System.out.print("Informe o valor da transferência: ");
                double valorTransferencia = scanner.nextDouble();
                cliente.transferir(valorTransferencia, cpfDestinatario);
                break;
            case 4:
            	 System.out.println("Retornando ao menu anterior...");
                 break;
            default:
                System.out.println("Opção inválida.");
        }
    }


    private void relatorios(Cliente cliente) {
        System.out.println("\nRelatórios:");
        System.out.println("1. Saldo");
        System.out.println("2. Relatório de tributação da conta corrente");
        System.out.println("3. Relatório de Rendimento da poupança");
        System.out.println("4. Desafio: Seguro de vida");
        System.out.println("5. Voltar");

        System.out.print("Escolha uma opção: ");
        int opcao = scanner.nextInt();
        scanner.nextLine(); // Limpar o buffer do scanner

        switch (opcao) {
            case 1:
                System.out.println("Saldo: R$" + cliente.getSaldo());
                break;
            case 2:
            	   System.out.println("Relatório de Tributação da Conta Corrente:");
                   ContaCorrente contaCorrente = cliente.getSuaContaCorrente();
                   double totalGasto = contaCorrente.getTotalGasto();
                   double taxaSaque = contaCorrente.getTaxaSaque();
                   double taxaDeposito = contaCorrente.getTaxaDeposito();
                   double taxaTransferencia = contaCorrente.getTaxaTransferencia();

                   System.out.println("Total gasto em operações: R$" + totalGasto);
                   System.out.println("Taxa de saque: R$" + taxaSaque);
                   System.out.println("Taxa de depósito: R$" + taxaDeposito);
                   System.out.println("Taxa de transferência: R$" + taxaTransferencia);
                   break;
            case 3:
            	 System.out.println("Relatório de Rendimento da Poupança:");
            	    System.out.print("Informe o valor em dinheiro: ");
            	    double valor = scanner.nextDouble();
            	    System.out.print("Informe a quantidade de dias para simulação: ");
            	    int dias = scanner.nextInt();

            	    double rendimento = cliente.getSuaContaPoupanca().calcularRendimento(valor, dias);
            	    System.out.println("Rendimento da poupança para " + dias + " dias: R$" + rendimento);
            	    break;
            case 4:
            	 System.out.print("Informe o valor a ser segurado: ");
            	    double valorSeguro = scanner.nextDouble();
            	    double taxaSeguro = valorSeguro * 0.2; // 20% do valor segurado como taxa de seguro
            	    cliente.contratarSeguroVida(valorSeguro);

            	    System.out.println("Seguro de vida contratado com sucesso. Taxa de seguro: R$" + taxaSeguro);
            	    break;
            case 5:
            	 System.out.println("Retornando ao menu anterior...");
                 break;
            default:
                System.out.println("Opção inválida.");
        }
    }



    private void menuFuncionario(Funcionario funcionario) {
        System.out.println("Bem-vindo, " + funcionario.getCargo() + "!");

        boolean sair = false;
        while (!sair) {
            System.out.println("\nMenu:");
            System.out.println("1. Movimentações e Informações da Conta");
            System.out.println("2. Relatórios");
            System.out.println("3. Sair");
            System.out.print("Escolha uma opção: ");
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    movimentacoesInformacoesConta((Gerente) funcionario);
                    break;
                case 2:
                    relatoriosFuncionario(funcionario);
                    break;
                case 3:
                    sair = true;
                    break;
                default:
                    System.out.println("Opção inválida.");
            }
        }
    }
    System.out.print("Informe o valor a ser segurado: ");
    double valorSeguro = scanner.nextDouble();
    double taxaSeguro = valorSeguro * 0.2; // 20% do valor segurado como taxa de seguro
    cliente.contratarSeguroVida(valorSeguro);

    System.out.println("Seguro de vida contratado com sucesso. Taxa de seguro: R$" + taxaSeguro);
    break;

    private void movimentacoesInformacoesConta(Gerente gerente) {
        System.out.println("\nMovimentações e Informações da Conta:");
        System.out.println("1. Saque");
        System.out.println("2. Depósito");
        System.out.println("3. Transferência para outra conta");
        System.out.println("4. Relatório do número de contas na mesma agência");
        System.out.println("5. Voltar");

        System.out.print("Escolha uma opção: ");
        int opcao = scanner.nextInt();
        scanner.nextLine(); // Limpar o buffer do scanner

        switch (opcao) {
            case 1:
                // Implementar saque
                break;
            case 2:
            	public void depositar(double valor) {
            	    if (valor <= 0) {
            	        throw new IllegalArgumentException("Valor inválido para depósito.");
            	    }
            	    saldo += valor;
            	    operacoes.add(new Operacao("Depósito", valor));
            	    registrarOperacao("Depósito", valor);
            	    System.out.println("Depósito de R$" + valor + " realizado com sucesso.");
            	}
                break;
            case 3:
                // Implementar transferência
                break;
            case 4:
                // Implementar relatório de número de contas na mesma agência
                break;
            case 5:
                return;
            default:
                System.out.println("Opção inválida.");
        
    }
    }

    private void relatoriosFuncionario(Funcionario funcionario) {
        System.out.println("\nRelatórios:");
        System.out.println("1. Saldo");
        System.out.println("2. Relatório de tributação da conta corrente");
        System.out.println("3. Relatório de Rendimento da poupança");
        System.out.println("4. Relatório com as informações de clientes");
        System.out.println("5. Relatório com o valor total do capital armazenado no banco");
        System.out.println("6. Voltar");

        System.out.print("Escolha uma opção: ");
        int opcao = scanner.nextInt();
        scanner.nextLine(); // Limpar o buffer do scanner

        switch (opcao) {
            case 1:
                // Implementar relatório de saldo
                break;
            case 2:
                // Implementar relatório de tributação
                break;
            case 3:
                // Implementar relatório de rendimento
                break;
            case 4:
                // Implementar relatório de informações de clientes
                break;
            case 5:
                // Implementar relatório de valor total do capital armazenado no banco
                break;
            case 6:
                return;
            default:
                System.out.println("Opção inválida.");
        }
    }
    
    private static void menuGerente(Gerente gerente) {
        int opcao;
        do {
            System.out.println("Menu do Gerente:");
            System.out.println("1. Movimentações e Informações da Conta");
            System.out.println("2. Relatórios");
            System.out.println("3. Sair");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    menuMovimentacoesContaGerente(gerente);
                    break;
                case 2:
                    menuRelatoriosGerente(gerente);
                    break;
                case 3:
                    System.out.println("Saindo do menu do gerente...");
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 3);
    }

    private static void menuMovimentacoesContaGerente(Gerente gerente) {
        System.out.println("Movimentações e Informações da Conta:");
        System.out.println("1. Saque");
        System.out.println("2. Depósito");
        System.out.println("3. Transferência para outra conta");
        System.out.println("4. Relatório do número de contas na mesma agência");
        System.out.println("5. Voltar");

        int opcao = scanner.nextInt();
        scanner.nextLine(); // Limpar o buffer do scanner

        switch (opcao) {
            case 1:
            	 System.out.print("Informe o CPF do titular da conta: ");
            	    String cpf = scanner.nextLine();
            	    System.out.print("Informe o valor do saque: ");
            	    double valorSaque = scanner.nextDouble();

            	    Conta conta = Banco.procurarConta(cpf);
            	    if (conta != null) {
            	        if (conta.sacar(valorSaque)) {
            	            System.out.println("Saque realizado com sucesso.");
            	        } else {
            	            System.out.println("Saldo insuficiente para realizar o saque.");
            	        }
            	    } else {
            	        System.out.println("Conta não encontrada.");
            	    }
            	    break;
            case 2:
            	  System.out.print("Informe o CPF do titular da conta: ");
            	    String cpfDeposito = scanner.nextLine();
            	    System.out.print("Informe o valor do depósito: ");
            	    double valorDeposito = scanner.nextDouble();

            	    Conta contaDeposito = Banco.procurarConta(cpfDeposito);
            	    if (contaDeposito != null) {
            	        contaDeposito.depositar(valorDeposito);
            	        System.out.println("Depósito realizado com sucesso.");
            	    } else {
            	        System.out.println("Conta não encontrada.");
            	    }
            	    break;
            case 3:
            	  System.out.print("Informe o CPF do titular da conta de origem: ");
            	    String cpfRemetente = scanner.nextLine();
            	    System.out.print("Informe o CPF do titular da conta de destino: ");
            	    String cpfDestinatario = scanner.nextLine();
            	    System.out.print("Informe o valor da transferência: ");
            	    double valorTransferencia = scanner.nextDouble();

            	    Conta contaRemetente = Banco.procurarConta(cpfRemetente);
            	    Conta contaDestinatario = Banco.procurarConta(cpfDestinatario);

            	    if (contaRemetente != null && contaDestinatario != null) {
            	        if (contaRemetente.transferir(contaDestinatario, valorTransferencia)) {
            	            System.out.println("Transferência realizada com sucesso.");
            	        } else {
            	            System.out.println("Saldo insuficiente para realizar a transferência.");
            	        }
            	    } else {
            	        System.out.println("Uma ou ambas as contas não foram encontradas.");
            	    }
            	    break;
            case 4:
            	 System.out.print("Informe o número da agência: ");
            	    int numeroAgencia = scanner.nextInt();
            	    int numContasAgencia = Banco.contarContasPorAgencia(numeroAgencia);
            	    System.out.println("Número de contas na agência " + numeroAgencia + ": " + numContasAgencia);
            	    break;
            case 5:
                System.out.println("Retornando ao menu anterior...");
                break;
            default:
                System.out.println("Opção inválida. Tente novamente.");
        }
    }
    private static void menuDiretor(Diretor diretor) {
        int opcao;
        do {
            System.out.println("Menu do Diretor:");
            System.out.println("1. Movimentações e Informações da Conta");
            System.out.println("2. Relatórios");
            System.out.println("3. Sair");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar o buffer do scanner

            switch (opcao) {
                case 1:
                    menuMovimentacoesContaGerente(diretor); // O diretor tem as mesmas funcionalidades do gerente
                    break;
                case 2:
                    menuRelatoriosDiretor(diretor);
                    break;
                case 3:
                    System.out.println("Saindo do menu do diretor...");
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 3);
    }
    private static void menuRelatoriosDiretor(Diretor diretor) {
        System.out.println("Relatórios:");
        System.out.println("1. Relatório com as informações de Nome, CPF e Agência de todos os clientes do sistema em ordem alfabética");
        System.out.println("2. Voltar");

        int opcao = scanner.nextInt();
        scanner.nextLine(); // Limpar o buffer do scanner

        switch (opcao) {
            case 1:
                System.out.println("Relatório de clientes em ordem alfabética:");
                Banco.listarClientesEmOrdemAlfabetica();
                break;
            case 2:
                System.out.println("Retornando ao menu anterior...");
                break;
            default:
                System.out.println("Opção inválida. Tente novamente.");
        }
    }






    private void carregarClientes() {
        try {
            File file = new File("clientes.txt");
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String linha = scanner.nextLine();
                String[] dados = linha.split(",");
                String cpf = dados[0];
                String nome = dados[1];
                String senha = dados[2];
                Cliente cliente = new Cliente(cpf, nome, senha);
                clientes.put(cpf, cliente);
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("Erro ao carregar clientes: arquivo não encontrado.");
        }
    }
}

private void carregarFuncionarios() {
    try {
        File file = new File("funcionarios.txt");
        Scanner scanner = new Scanner(file);
        while (scanner.hasNextLine()) {
            String linha = scanner.nextLine();
            String[] dados = linha.split(",");
            String cpf = dados[0];
            String nome = dados[1];
            String senha = dados[2];
            String cargo = dados[3];
            Funcionario funcionario;
            switch (cargo) {
                case "Gerente":
                    funcionario = new Gerente(cpf, nome, senha);
                    ((Gerente) funcionario).setAgenciaResponsavel(dados[4]);
                    break;
                case "Diretor":
                    funcionario = new Diretor(cpf, nome, senha);
                    break;
                case "Presidente":
                    funcionario = new Presidente(cpf, nome, senha);
                    break;
                default:
                    funcionario = null;
            }
            if (funcionario != null) {
                funcionarios.put(cpf, funcionario);
            }
        }
        scanner.close();
    } catch (FileNotFoundException e) {
        System.out.println("Erro ao carregar funcionários: arquivo não encontrado.");
    }
}


    // Outros métodos conforme necessário
}


